#these will be possible code bases pasted in this thread to work off of for a basic simulation.

https://opensource.com/article/19/11/simulate-gravity-python
https://www.thanassis.space/gravity.html
Thanassis is too complicated but the simulation window is a complex version of what I am shooting for.

Next Step: Building python window that can display a circle as an object.

Then: Create a particle class.

creation of gravity has been done, sample code below:

class Particle(object):
    def __init__(self, position , size, mass):
        self.x,self.y = position
        self.size = size
        self.mass = mass
        self.color = (0,0,225)
        self.thickness = 1
        self.speed = 0
        self.angle = 0
        self.velocityX=0
        self.velocityY=0
        self.drag = (self.mass/(self.mass + mass_of_air)) ** self.size

    

    
    def display(self):
        pygame.draw.circle(screen, self.color, (int(self.x),int(self.y)), self.size, self.thickness)
    
    


    def move(self):
        (self.angle, self.speed) = addVectors((self.angle, self.speed), gravity)
        #gravityForces= math.atan2(self.angle,self.speed)
        self.velocityX+=self.angle
        self.velocityY+=self.speed
        self.x+=self.velocityX*timescale
        self.y+=self.velocityY*timescale
        print(self.x)
        self.x += math.sin(self.angle) * self.speed
        self.y -= math.cos(self.angle) * self.speed
        
        



    def bounce(self):
        if self.x > width - self.size:
            self.x = 2 * (width - self.size) - self.x
            self.angle = - self.angle
            self.speed *= elasticity

        elif self.x < self.size:
            self.x = 2 * self.size - self.x
            self.angle = - self.angle
            self.speed *= elasticity
        
        if self.y > height - self.size:
            self.y = 2 * (height - self.size) - self.y
            self.angle = math.pi - self.angle
            self.speed *= elasticity

        elif self.y < self.size:
            self.y = 2 * self.size - self.y
            self.angle = math.pi -self.angle
            self.speed *= elasticity
